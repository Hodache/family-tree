@page "/queries"
@rendermode InteractiveServer
@inject IJSRuntime JSRuntime
@inject IFamilyTreeService FamilyTreeService

<MudThemeProvider />
<MudPopoverProvider />
<MudDialogProvider />
<MudSnackbarProvider />

<PageTitle>Особые запросы</PageTitle>

<MudPaper Class="p-4">
    <MudText Typo="Typo.h6">Поиск ближайших родственников (родители и дети)</MudText>

    <MudForm @ref="form" Valid="isValid">
        <MudSelect T="int" Label="Человек" @bind-Value="personId" Required="true">
            @foreach (var person in allPersons) 
            {
                <MudSelectItem T="int" Value="person.Id">
                    @(person.Id + "_" + person.Name)
                </MudSelectItem>
            }
        </MudSelect>

        <MudButton Style="margin-top: 20px;" Variant="Variant.Filled" Color="Color.Primary" OnClick="FindRelatives" Disabled="!isValid">
            Найти
        </MudButton>

        <MudText Typo="Typo.h6">Результат</MudText>
        <MudText Typo="Typo.body1">Родители: @parents</MudText>
        <MudText Typo="Typo.body1">Дети: @children</MudText>
    </MudForm>
</MudPaper>

<MudPaper Class="p-4">
    <MudText Typo="Typo.h6">Узнать сколько лет на момент рождения человека</MudText>

    <MudForm @ref="ageForm" Valid="isAgeFormValid">
        <MudSelect T="int" Label="Человек, чей возраст интересует" @bind-Value="agePersonId" Required="true">
            @foreach (var person in allPersons)
            {
                <MudSelectItem T="int" Value="person.Id">
                    @(person.Id + "_" + person.Name)
                </MudSelectItem>
            }
        </MudSelect>

        <MudSelect T="int" Label="Рожденный человек" @bind-Value="bornPersonId" Required="true">
            @foreach (var person in allPersons)
            {
                <MudSelectItem T="int" Value="person.Id">
                    @(person.Id + "_" + person.Name)
                </MudSelectItem>
            }
        </MudSelect>

        <MudButton Style="margin-top: 20px;" Variant="Variant.Filled" Color="Color.Primary" OnClick="CalculateAge" Disabled="!isAgeFormValid">
            Посчитать
        </MudButton>

        <MudText Typo="Typo.h6">Результат</MudText>
        <MudText Typo="Typo.body1">Количество лет: @age</MudText>
    </MudForm>
</MudPaper>

@code {
    private static IEnumerable<PersonResponseDTO> allPersons = new List<PersonResponseDTO>();

    private MudForm form;
    private MudForm ageForm;

    private bool isValid => form.IsValid;
    private bool isAgeFormValid => ageForm.IsValid;

    private int personId = 1;
    private string parents = "";
    private string children = "";

    private int agePersonId = 1;
    private int bornPersonId = 2;
    private int age = -1;

    protected override async Task OnInitializedAsync()
    {
        allPersons = await FamilyTreeService.GetPersonsAsync();
    }

    private async Task FindRelatives()
    {
        if (form.IsValid)
        {
            try
            {
                parents = "";
                children = "";

                var relatives = await FamilyTreeService.GetRelativesAsync(personId);
                var relations = await FamilyTreeService.GetRelationsAsync();

                var parentRelations = relations.Where(r => r.ToPersonId == personId && r.Type == 1).ToList();
                var childRelations = relations.Where(r => r.FromPersonId == personId && r.Type == 1).ToList();

                parents = string.Join(", ", parentRelations.Select(r => relatives.First(p => p.Id == r.FromPersonId).Name));
                children = string.Join(", ", childRelations.Select(r => relatives.First(p => p.Id == r.ToPersonId).Name));
            }
            catch (ArgumentException e)
            {
                await JSRuntime.InvokeVoidAsync("alert", e.Message);
            }
            catch (Exception e)
            {
                await JSRuntime.InvokeVoidAsync("alert", e.Message);
            }
        }
    }

    private async Task CalculateAge()
    {
        if (ageForm.IsValid)
        {
            try
            {
                age = await FamilyTreeService.CalculatePersonAgeAtBirth(agePersonId, bornPersonId);
            }
            catch (ArgumentException e)
            {
                await JSRuntime.InvokeVoidAsync("alert", e.Message);
            }
            catch (Exception e)
            {
                await JSRuntime.InvokeVoidAsync("alert", e.Message);
            }
        }
    }
}